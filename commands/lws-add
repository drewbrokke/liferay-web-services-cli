#!/usr/bin/env node

var _ = require('lodash');
var program = require('commander');

program
	.command('user [quantity]')
	.alias('u')
	.description('Adds one or more users to the database.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;
		require('./add/user')(number);
	});

program
	.command('role [quantity]')
	.alias('r')
	.description('Adds one or more roles to the database. Number of role can be defined before or after.')
	.option('-t, --type <type>', 'Type of role to add. Accepts "site" or "organization". Defaults to "regular".')
	.action(function(number) {
		var type = this.type;

		number = !_.isNaN(Number(number)) ? Number(number) : 1;

		if (type === 'site') {
			type = 2;
		}
		else if (type === 'organization' || type === 'org') {
			type = 3;
		}
		else {
			type = 1;
		}
		require('./add/role')(number, type);
	});

program
	.command('user-role')
	.alias('ur')
	.description('Assign a role to a user. If called with no arguments, it will create a new role and user.')
	.option('-u, --userInfo <userInfo>', 'User id to add a role to.')
	.option('-r, --roleInfo <roleInfo>', 'The role id to add to the user.')
	.action(function() {
		require('./add/user-role')(this.userInfo, this.roleInfo)
	});

program
	.command('site [quantity]')
	.alias('s')
	.description('Adds one or more sites to the database. Number of sites can be defined before or after.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;

		require('./add/group')(number);
	});

program
	.command('page [quantity]')
	.alias('p')
	.option('-g, --groupId <integer>', 'The groupId to add the pages to. Defaults to the ID of the guest site.', Number, 20181)
	.option('-p, --parentLayoutId <integer>', 'The parent page ID to add the pages to. Defaults to 0.', Number, 0)
	.description('Adds one or more pages to the database. Number of pages can be defined before or after.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;
		require('./add/layout')(number, this.groupId, this.parentLayoutId);
	});

program
	.command('organization [quantity]')
	.alias('o')
	.option('-p, --parentOrganizationId <integer>', 'The parent organization ID to add the organization to. Defaults to 0.', Number, 0)
	.description('Adds one or more organizations to the database. Number of organizations can be defined before or after.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;
		require('./add/organization')(number, this.parentOrganizationId);
	});

program.parse(process.argv);

if (!process.argv.slice(2).length) {
	program.outputHelp();
}
