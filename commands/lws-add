#!/usr/bin/env node

var _ = require('lodash');
var async = require('async');
var program = require('commander');

var commands = {
	addGroup: require('./add/group'),
	addGroupUsers: require('./add/group-users'),
	addLayout: require('./add/layout'),
	addOrganization: require('./add/organization'),
	addRole: require('./add/role'),
	addUserGroup: require('./add/user-group'),
	addUserRole: require('./add/user-role'),
	addUser: require('./add/user')
}

program
	.command('user [quantity]')
	.alias('u')
	.description('Adds one or more users to the database.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;
		commands.addUser(number);
	});

program
	.command('role [quantity]')
	.alias('r')
	.description('Adds one or more roles to the database.')
	.option('-t, --type <type>', 'Type of role to add. Accepts "site" or "organization". Defaults to "regular".')
	.action(function(number) {
		var type = this.type;

		number = !_.isNaN(Number(number)) ? Number(number) : 1;

		if (type === 'site') {
			type = 2;
		}
		else if (type === 'organization' || type === 'org') {
			type = 3;
		}
		else {
			type = 1;
		}
		commands.addRole(number, type);
	});

program
	.command('site [quantity]')
	.alias('s')
	.description('Adds one or more sites to the database.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;

		commands.addGroup(number);
	});

program
	.command('page [quantity]')
	.alias('p')
	.option('-g, --groupId <integer>', 'The groupId to add the pages to. Defaults to the ID of the guest site.', Number, 20181)
	.option('-p, --parentLayoutId <integer>', 'The parent page ID to add the pages to. Defaults to 0.', Number, 0)
	.description('Adds one or more pages to the database.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;
		commands.addLayout(number, this.groupId, this.parentLayoutId);
	});

program
	.command('organization [quantity]')
	.alias('o')
	.option('-p, --parentOrganizationId <integer>', 'The parent organization ID to add the organization to. Defaults to 0.', Number, 0)
	.description('Adds one or more organizations to the database.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;
		commands.addOrganization(number, this.parentOrganizationId);
	});

program
	.command('user-group [quantity]')
	.alias('ug')
	.description('Adds one or more user groups to the database.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;

		commands.addUserGroup(number);
	});

program
	.command('user-role')
	.alias('ur')
	.description('Assign a role to a user. If called with no arguments, it will create a new role and user.')
	.option('-u, --userInfo <userInfo>', 'User id to add a role to.')
	.option('-r, --roleInfo <roleInfo>', 'The role id to add to the user.')
	.action(function() {
		var userInfo = this.userInfo;
		var roleInfo = this.roleInfo;

		var tasks = [];

		if (!userInfo) {
			function addUser(asyncCallback) {
				commands.addUser(1, function(error, results) {
					userInfo = JSON.parse(results[0]).userId;
					asyncCallback();
				});
			}

			tasks.push(addUser);
		}

		if (!roleInfo) {
			function addRole(asyncCallback) {
				commands.addRole(1, 1, function(error, results) {
					roleInfo = JSON.parse(results[0]).roleId;
					asyncCallback();
				});
			}

			tasks.push(addRole);
		}

		async.series(tasks, function() {
			commands.addGroupUsers(userInfo, roleInfo);
		});
	});

program
	.command('site-users [quantityOfUsers]')
	.alias('su')
	.description('Create a site populated with users.')
	.action(function(number) {
		number = !_.isNaN(Number(number)) ? Number(number) : 1;

		var groupId;
		var tasks = [];
		var userIds = [];

		function addGroup(asyncCallback) {
			commands.addGroup(1, function(error, results) {
				groupId = JSON.parse(results[0]).groupId;
				asyncCallback();
			});
		}

		tasks.push(addGroup);

		function addUser(asyncCallback) {
			commands.addUser(number, function(error, results) {
				_.forEach(results, function(user) {
					userIds.push(JSON.parse(user).userId);
				});

				asyncCallback();
			});
		}

		tasks.push(addUser);

		async.series(tasks, function() {
			commands.addGroupUsers(groupId, userIds);
		});
	});

program.parse(process.argv);

if (!process.argv.slice(2).length) {
	program.outputHelp();
}
