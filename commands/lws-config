#!/usr/bin/env node

var _ = require('lodash');
var async = require('async');
var inquirer = require('inquirer');
var program = require('commander');

var utils = require('../lib/utils');

var config = utils.getConfig();

program.parse(process.argv);

var actions = {
	addInstanceAnswer: 'ADD a new portal instance configuration.',
	editInstanceAnswer: 'EDIT a portal instance configuration.',
	deleteInstanceAnswer: 'DELETE a portal instance configuration.',
	listInstancesAnswer: 'LIST current portal instance configurations.',
	useInstanceAnswer: 'USE a different portal instance configuration.'
};

var command = program.args[0];

var instanceConfigList = config.getInstanceConfigList();

var whichActionQuestion = {
	type: 'list',
	name: 'action',
	message: 'What would you like to do?',
	choices: [
		actions.addInstanceAnswer,
		actions.editInstanceAnswer,
		actions.deleteInstanceAnswer,
		actions.listInstancesAnswer,
		actions.useInstanceAnswer
	]
};

function addInstance() {
	var defaultName = 'Instance config ' + instanceConfigList.length;
	var defaultUserName = 'test@liferay.com';
	var defaultPassword = 'test';
	var defaultHost = 'localhost';
	var defaultPort = '8080';
	var defaultPortalVersion = 'master';

	configureInstance(defaultName, defaultUserName, defaultPassword, defaultHost, defaultPort, defaultPortalVersion);
}

function configureInstance(defaultName, defaultUserName, defaultPassword, defaultHost, defaultPort, defaultPortalVersion) {
	var questions = [];

	if (defaultName != 'default') {
		var configNameQuestion = {
			name: 'instanceName',
			message: 'What would you like to name this instance configuration?',
			default: defaultName
		};

		questions.push(configNameQuestion);
	}

	var userNameQuestion = {
		name: 'userName',
		message: 'Username or email address?',
		default: defaultUserName
	};

	questions.push(userNameQuestion);

	var passwordQuestion = {
		name: 'password',
		message: 'Password?',
		default: defaultPassword
	};

	questions.push(passwordQuestion);

	var domainQuestion = {
		name: 'domain',
		message: 'Host?',
		default: defaultHost
	};

	questions.push(domainQuestion);

	var portQuestion = {
		name: 'port',
		message: 'Port?',
		default: defaultPort
	};

	questions.push(portQuestion);

	var portalVersionQuestion = {
		type: 'list',
		name: 'portalVersion',
		message: 'Portal Version?',
		default: defaultPortalVersion,
		choices: [
			'master',
			'6.2',
			'6.1'
		]
	};

	questions.push(portalVersionQuestion);

	inquirer.prompt(questions, function(answers) {
		if (defaultName != 'default') {
			config.deleteInstanceConfig(defaultName);
		}

		var configName = answers.instanceName || defaultName;

		config.setInstanceConfig(configName, answers.userName, answers.password, answers.domain, answers.port, answers.portalVersion);
	});
}

function deleteInstance(instanceName) {
	instanceName = instanceName || program.args[1];
	var instanceConfig = config.getInstanceConfig(instanceName);

	if (instanceName && !!instanceConfig) {
		config.deleteInstanceConfig(instanceName)
	}
	else {
		var deleteInstanceQuestion = {
			type: 'list',
			name: 'instanceName',
			message: 'Which instance configuration would you like to delete?',
			choices: instanceConfigList
		};

		inquirer.prompt([deleteInstanceQuestion], function(answers) {
			if (answers.instanceName != 'default') {
				config.deleteInstanceConfig(answers.instanceName)
			}
			else {
				console.log('You cannot delete the default instance configuration.');
			}
		});
	}
}

function editInstance() {
	var instanceName = program.args[1];
	var instanceConfig = config.getInstanceConfig(instanceName);

	if (instanceName && !!instanceConfig) {
		var instanceConfig = instanceConfig;

		configureInstance(instanceName, instanceConfig.username, instanceConfig.password, instanceConfig.domain, instanceConfig.port, instanceConfig.portalVersion);
	}
	else {
		var editInstanceQuestion = {
			type: 'list',
			name: 'instanceName',
			message: 'Which instance configuration would you like to edit?',
			choices: instanceConfigList
		};

		inquirer.prompt([editInstanceQuestion], function(answers) {
			instanceName = answers.instanceName;
			instanceConfig = config.getInstanceConfig(instanceName);

			configureInstance(instanceName, instanceConfig.username, instanceConfig.password, instanceConfig.domain, instanceConfig.port, instanceConfig.portalVersion);
		});
	}
}

function listInstances() {
	console.log('');
	_.forEach(config.getInstanceConfigs(), function(instance, instanceName) {
		var appendix = ':';

		if (instanceName === config.getActiveInstanceName()) {
			appendix = ' (ACTIVE):'
		}

		console.log(instanceName + appendix);
		utils.printJSON(instance);
		console.log('');
	});
}

function routeAction(action) {
	if (action === 'add' || action === actions.addInstanceAnswer) {
		addInstance();
	}
	else if (action === 'edit' || action === actions.editInstanceAnswer) {
		editInstance();
	}
	else if (action === 'delete' || action === actions.deleteInstanceAnswer) {
		deleteInstance();
	}
	else if (action === 'list' || action === actions.listInstancesAnswer) {
		listInstances();
	}
	else if (action === 'use' || action === actions.useInstanceAnswer) {
		useInstance();
	}
}

function useInstance() {
	var instanceName = program.args[1];
	var instanceConfig = config.getInstanceConfig(instanceName);

	if (instanceName && !!instanceConfig) {
		config.setActiveInstanceConfig(instanceName);
	}
	else {
		var useInstanceQuestion = {
			type: 'list',
			name: 'instanceName',
			message: 'Which instance configuration would you like to use?',
			choices: instanceConfigList
		};

		inquirer.prompt([useInstanceQuestion], function(answers) {
			config.setActiveInstanceConfig(answers.instanceName);
		});
	}
}

if (command) {
	routeAction(command.toLowerCase())
}
else {
	console.log('');
	inquirer.prompt([whichActionQuestion], function(answers) {
		routeAction(answers.action);
	});
}

