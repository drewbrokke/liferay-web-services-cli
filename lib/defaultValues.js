var generatorUtil = require('./utils/generatorUtil');

var Chance = require('chance');
var chance = new Chance();

function get() {
	// Re-used generated data
	var personObject = generatorUtil.generateUserInfo();
	var roleName = generatorUtil.generateRoleName();
	var groupName = 'LWS Group: ' + chance.capitalize(chance.word());
	var layoutName = 'LWS Layout: ' + chance.capitalize(chance.word());

	// Re-used Display Keys Omissions
	var USER_OmitKeys = ['comments', 'createDate', 'facebookId', 'failedLoginAttempts', 'graceLoginCount', 'greeting', 'jobTitle', 'languageId', 'lastFailedLoginDate', 'lastLoginDate', 'lastLoginIP', 'ldapServerId', 'lockoutDate', 'loginDate', 'loginIP', 'middleName', 'modifiedDate', 'mvccVersion', 'openId', 'portraitId', 'reminderQueryAnswer', 'reminderQueryQuestion', 'status', 'timeZoneId', 'uuid'];
	var GROUP_OmitKeys = ['name', 'uuid', 'description', 'mvccVersion', 'liveGroupId', 'creatorUserId', 'remoteStagingGroupCount', 'membershipRestriction', 'descriptionCurrentValue', 'typeSettings'];
	var LAYOUT_OmitKeys = ['colorSchemeId', 'createDate', 'css', 'description', 'descriptionCurrentValue', 'groupId', 'iconImageId', 'keywords', 'keywordsCurrentValue', 'lastPublishDate', 'layoutPrototypeUuid', 'modifiedDate', 'mvccVersion', 'name', 'plid', 'priority', 'robots', 'robotsCurrentValue', 'sourcePrototypeLayoutUuid', 'themeId', 'title', 'typeSettings', 'userId', 'userName', 'uuid', 'wapColorSchemeId', 'wapThemeId'];
	// Method configuration object
	// This needs to be broken up into different files, probably one per service
	var DEFAULT_VALUES = {
		Group: {
			'add-group': {
				omitFromResultsDisplayKeys: GROUP_OmitKeys,
				params: {
					name: groupName,
					nameMap: JSON.stringify({ "en_US": groupName }),
					description: "Generated by LWS",
					type: 1,
					manualMembership: true,
					site: true,
					active: true
				},
				requiredParams: []
			},
			'get-groups': {
				omitFromResultsDisplayKeys: GROUP_OmitKeys,
				params: {},
				requiredParams: []
			}
		},
		Layout: {
			'add-layout': {
				omitFromResultsDisplayKeys: LAYOUT_OmitKeys,
				params: {
					name: layoutName,
					title: layoutName,
					type: 'portlet'
				},
				requiredParams: ['groupId']
			}
		},
		Organization: {
			'add-organization': {
				omitFromResultsDisplayKeys: [],
				params: {
					name: generatorUtil.generateOrganizationName(),
					statusId: 12017,
					type: 'organization'
				},
				requiredParams: []
			}
		},
		Role: {
			'add-role': {
				omitFromResultsDisplayKeys: ['description', 'createDate', 'modifiedDate', 'mvccVersion', 'title', 'uuid'],
				params: {
					descriptionMap: JSON.stringify({ "en_US": "Generated by LWS." }),
					name: roleName,
					titleMap: JSON.stringify({ "en_US": roleName }),
					type: 1,
				},
				requiredParams: []
			},
			'add-user-roles': {
				omitFromResultsDisplayKeys: [],
				params: {},
				requiredParams: ['userId', 'roleIds']
			},
			'delete-role': {
				omitFromResultsDisplayKeys: [],
				params: {},
				requiredParams: ['roleId']
			}
		},
		User: {
			'add-group-users': {
				omitFromResultsDisplayKeys: [],
				params: {},
				requiredParams: ['groupId', 'userIds']
			},
			'add-user': {
				omitFromResultsDisplayKeys: USER_OmitKeys,
				params: {
					birthdayDay: 1,
					birthdayMonth: 1,
					birthdayYear: 1901,
					emailAddress: personObject.emailAddress,
					firstName: personObject.firstName,
					lastName: personObject.lastName,
					male: personObject.male,
					password1: 'test',
					password2: 'test',
					screenName: personObject.screenName
				},
				requiredParams: []
			},
			'add-role-users': {
				omitFromResultsDisplayKeys: [],
				params: {},
				requiredParams: ['roleId', 'userIds']
			},
			'get-company-users': {
				omitFromResultsDisplayKeys: USER_OmitKeys,
				params: {},
				requiredParams: []
			}
		},
		UserGroup: {
			'add-user-group': {
				omitFromResultsDisplayKeys: ['createDate', 'modifiedDate', 'mvccVersion', 'parentUserGroupId', 'uuid', 'userName'],
				params: {
					name: generatorUtil.generateUserGroupName()
				},
				requiredParams: []
			}
		}
	};

	return DEFAULT_VALUES;
}

// Template
var template = {

'method-name': {
	omitFromResultsDisplayKeys: [],
	params: {},
	requiredParams: []
}

};

module.exports = get;